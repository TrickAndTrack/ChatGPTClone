@Test
public void testGenerateContentWithLongInput() throws Exception {
    // Arrange
    String longInput = "a".repeat(10000); // Create a very long input string
    String expectedResponse = "Mocked response for long input";
    
    when(mockUrl.openConnection()).thenReturn(mockConnection);
    when(mockConnection.getInputStream()).thenReturn(
        new ByteArrayInputStream(expectedResponse.getBytes()));
    
    // Act
    String result = geminiContentService.generateContent(longInput);
    
    // Assert
    assertEquals(expectedResponse, result);
    verify(mockConnection).setRequestMethod("POST");
    verify(mockConnection).setRequestProperty("Content-Type", "application/json");
    verify(mockConnection).setDoOutput(true);
    
    // Verify that the entire long input was sent in the request
    ArgumentCaptor<byte[]> outputStreamCaptor = ArgumentCaptor.forClass(byte[].class);
    verify(mockConnection.getOutputStream()).write(outputStreamCaptor.capture());
    String sentJson = new String(outputStreamCaptor.getValue());
    assertTrue(sentJson.contains(longInput));
}@Test
public void testGenerateContent_InvalidApiKey() throws Exception {
    // Arrange
    String invalidApiKey = "invalid_key";
    ReflectionTestUtils.setField(geminiContentService, "apiKey", invalidApiKey);
    String testText = "Test content";

    when(mockUrl.openConnection()).thenReturn(mockConnection);
    when(mockConnection.getOutputStream()).thenReturn(new ByteArrayOutputStream());
    when(mockConnection.getInputStream()).thenThrow(new IOException("Invalid API key"));

    // Act
    String result = geminiContentService.generateContent(testText);

    // Assert
    assertEquals("Error generating content", result);
    verify(mockConnection).setRequestMethod("POST");
    verify(mockConnection).setRequestProperty("Content-Type", "application/json");
    verify(mockConnection).setDoOutput(true);
}package com.audio.service;

import org.mockito.InjectMocks;
import org.mockito.Mock;

import java.net.HttpURLConnection;
import java.net.URL;

class GeminiContentServiceTest {

    @InjectMocks
    private GeminiContentService geminiContentService;

    @Mock
    private URL mockUrl;

    @Mock
    private HttpURLConnection mockConnection;
}
